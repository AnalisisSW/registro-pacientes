/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package centromedico.programa;

import centromedico.entities.Diagnostico;
import centromedico.entities.Medico;
import centromedico.entities.Paciente;
import centromedico.hibernate.manager.SessionFactoryManager;
import centromedico.repositories.DiagnosticoR;
import centromedico.repositories.MedicoR;
import centromedico.repositories.PacienteR;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.HibernateException;
import org.hibernate.SessionFactory;

/**
 * @author Grupo 7
 */
public class PacientesPorMedico extends javax.swing.JFrame {

    private final SessionFactory factory = SessionFactoryManager.getSessionFactory();
    /**
     * Creates new form PacientesPorMedico
     */
    public PacientesPorMedico() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxMedicos = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePacientes = new javax.swing.JTable();
        jButtonConsultar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();

        setTitle("Listado de Pacientes por Medico");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("Listado de Pacientes Por Medico");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("Medico:");

        jComboBoxMedicos.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jTablePacientes.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jTablePacientes.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTablePacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod. Paciente", "Apellido", "Nombre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePacientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTablePacientes);

        jButtonConsultar.setBackground(new java.awt.Color(0, 153, 0));
        jButtonConsultar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButtonConsultar.setText("Consultar");
        jButtonConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultarActionPerformed(evt);
            }
        });

        jButtonCancelar.setBackground(new java.awt.Color(255, 0, 0));
        jButtonCancelar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButtonCancelar.setText("Volver");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonCancelar)
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxMedicos, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonConsultar)
                .addGap(137, 137, 137))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxMedicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonConsultar)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCancelar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        factory.close();
        this.setVisible(false);
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        List<Medico> listaMedicos = new ArrayList<>();
        try {
            //Cuando se abre la ventana cargo todos los medicos en el comboBox
            MedicoR medicoRepo = new MedicoR(factory);
            listaMedicos = medicoRepo.getAll();
            listaMedicos.forEach(item->{
                String med = item.getCodigo() + "| " + item.getNombre() + " | " + item.getEspecialidad();
                jComboBoxMedicos.addItem(med);
            });
        } catch (HibernateException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        factory.close();
        this.setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    private void jButtonConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultarActionPerformed
        String codMed = (String) jComboBoxMedicos.getSelectedItem();
        jTablePacientes.removeAll();
        if(codMed!=null && !codMed.isEmpty()){
            //busca todos los pacientes que atendio ese medico
            try {
                List<Diagnostico> diagnosticos = new ArrayList<>();
                String codM = firstWord(codMed, '|');
                DiagnosticoR diagnosticoRepo = new DiagnosticoR(factory);
                diagnosticos = diagnosticoRepo.getByMedico(codM);
                PacienteR pacienteRepo = new PacienteR(factory);
                Set<Paciente> pacientes = new TreeSet<>();
                diagnosticos.forEach(item->{
                    Paciente p = (Paciente) pacienteRepo.getById(Paciente.class, item.getCodPac());
                    pacientes.add(p);
                });
                DefaultTableModel model = (DefaultTableModel) jTablePacientes.getModel();
                model.setRowCount(0);
                pacientes.forEach(item->{
//                    List<Diagnostico> listDiag = diagnosticoRepo.getByCPCM(Diagnostico.class,item.getCodigo(), codM);
//                    String historiaClinica = "";
//                    historiaClinica = listDiag.stream().map((d) -> d.getDiagnostico()).reduce(historiaClinica, String::concat);
                    model.addRow(new Object[]{item.getCodigo(), item.getApellido(), item.getNombre()});
                });
            } catch (HibernateException ex) {
                System.out.println(ex);
            }
        }else{
            JOptionPane.showMessageDialog(null, "El campo del medico se encuentra vacio");
        }
    }//GEN-LAST:event_jButtonConsultarActionPerformed

    private void jTablePacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePacientesMouseClicked
        
        int row = jTablePacientes.rowAtPoint(evt.getPoint());
        String codigo = (String) jTablePacientes.getModel().getValueAt(row, 0);
        try {
            //Al hacer click en uno de los pacientes se abre la historia clinica del mismo
            DiagnosticoR diagRepo = new DiagnosticoR(factory);
            List<Diagnostico> listDiag = diagRepo.getByCP(Diagnostico.class, codigo);
            HistoriaClinica history = new HistoriaClinica();
            history.requestFocusInWindow();
            history.setDiagnosticos(listDiag);
            history.setVisible(true);
        } catch (HibernateException ex) {
            System.out.println(ex);
        }

    }//GEN-LAST:event_jTablePacientesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PacientesPorMedico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PacientesPorMedico().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonConsultar;
    private javax.swing.JComboBox<String> jComboBoxMedicos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablePacientes;
    // End of variables declaration//GEN-END:variables
    
    private String firstWord(String str, char delimeter) {
        return str.substring(0, str.indexOf(delimeter));
    }
   
}
